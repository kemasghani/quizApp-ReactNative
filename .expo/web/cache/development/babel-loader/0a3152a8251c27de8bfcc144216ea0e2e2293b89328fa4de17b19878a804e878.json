{"ast":null,"code":"import Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated, { Keyframe, runOnJS } from 'react-native-reanimated';\nimport { Option } from \"../Option\";\nimport { styles } from \"./styles\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SCREEN_WIDTH = Dimensions.get('window').width;\nvar _worklet_7857531211757_init_data = {\n  code: \"function anonymous(finished) {\\n  const {\\n    runOnJS,\\n    onUnmount\\n  } = this._closure;\\n  if (finished) {\\n    runOnJS(onUnmount)();\\n  }\\n}\",\n  location: \"C:\\\\quizApp-ReactNative\\\\src\\\\components\\\\Question\\\\index.tsx\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"finished\\\",\\\"runOnJS\\\",\\\"onUnmount\\\",\\\"_closure\\\"],\\\"sources\\\":[\\\"C:/quizApp-ReactNative/src/components/Question/index.tsx\\\"],\\\"mappings\\\":\\\"AAmE0D,SAAAA,UAAQC,QAAI;EAAA;IAAAC,OAAA;IAAAC;EAAA,SAAAC,QAAA;EAG9D,IAAIH,QAAQ,EAAE;IACZC,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC;EACtB;AACF\\\",\\\"ignoreList\\\":[]}\"\n};\nexport function Question(_ref) {\n  var question = _ref.question,\n    alternativeSelected = _ref.alternativeSelected,\n    setAlternativeSelected = _ref.setAlternativeSelected,\n    onUnmount = _ref.onUnmount;\n  var enteringKeyframe = new Keyframe({\n    0: {\n      opacity: 0,\n      transform: [{\n        translateX: SCREEN_WIDTH\n      }, {\n        rotate: '90deg'\n      }]\n    },\n    70: {\n      opacity: 0.3\n    },\n    100: {\n      opacity: 1,\n      transform: [{\n        translateX: 0\n      }, {\n        rotate: '0deg'\n      }]\n    }\n  });\n  var exitingKeyframe = new Keyframe({\n    from: {\n      opacity: 1,\n      transform: [{\n        translateX: 0\n      }, {\n        rotate: '0deg'\n      }]\n    },\n    to: {\n      opacity: 0,\n      transform: [{\n        translateX: -SCREEN_WIDTH\n      }, {\n        rotate: '-90deg'\n      }]\n    }\n  });\n  return _jsxs(Animated.View, {\n    style: styles.container,\n    entering: enteringKeyframe.duration(400),\n    exiting: exitingKeyframe.duration(400).withCallback(function () {\n      var _e = [new global.Error(), -3, -27];\n      var _f = function _f(finished) {\n        if (finished) {\n          runOnJS(onUnmount)();\n        }\n      };\n      _f._closure = {\n        runOnJS: runOnJS,\n        onUnmount: onUnmount\n      };\n      _f.__initData = _worklet_7857531211757_init_data;\n      _f.__workletHash = 7857531211757;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }()),\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: question.title\n    }), question.alternatives.map(function (alternative, index) {\n      return _jsx(Option, {\n        title: alternative,\n        checked: alternativeSelected === index,\n        onPress: function onPress() {\n          return setAlternativeSelected && setAlternativeSelected(index);\n        }\n      }, index);\n    })]\n  });\n}","map":{"version":3,"names":["Animated","Keyframe","runOnJS","Option","styles","jsx","_jsx","jsxs","_jsxs","SCREEN_WIDTH","Dimensions","get","width","_worklet_7857531211757_init_data","code","location","sourceMap","Question","_ref","question","alternativeSelected","setAlternativeSelected","onUnmount","enteringKeyframe","opacity","transform","translateX","rotate","exitingKeyframe","from","to","View","style","container","entering","duration","exiting","withCallback","_e","global","Error","_f","finished","_closure","__initData","__workletHash","__stackDetails","__version","children","Text","title","alternatives","map","alternative","index","checked","onPress"],"sources":["C:/quizApp-ReactNative/src/components/Question/index.tsx"],"sourcesContent":["import { Text, Dimensions } from 'react-native';\nimport Animated, { Keyframe, runOnJS } from 'react-native-reanimated';\n\nimport { Option } from '../Option';\nimport { styles } from './styles';\n\ntype QuestionProps = {\n  title: string;\n  alternatives: string[];\n}\n\ntype Props = {\n  question: QuestionProps;\n  alternativeSelected?: number | null;\n  setAlternativeSelected?: (value: number) => void;\n  onUnmount: () => void;\n}\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\n\nexport function Question({\n  question,\n  alternativeSelected,\n  setAlternativeSelected,\n  onUnmount\n}: Props) {\n  const enteringKeyframe = new Keyframe({\n    0: {\n      opacity: 0,\n      transform: [\n        { translateX: SCREEN_WIDTH },\n        { rotate: '90deg' }\n      ],\n    },\n    70: {\n      opacity: 0.3,\n    },\n    100: {\n      opacity: 1,\n      transform: [\n        { translateX: 0 },\n        { rotate: '0deg' }\n      ],\n    }\n  });\n\n  const exitingKeyframe = new Keyframe({\n    from: {\n      opacity: 1,\n      transform: [\n        { translateX: 0 },\n        { rotate: '0deg' }\n      ],\n    },\n    to: {\n      opacity: 0,\n      transform: [\n        { translateX: -SCREEN_WIDTH },\n        { rotate: '-90deg' }\n      ],\n    }\n  });\n\n  return (\n    <Animated.View\n      style={styles.container}\n      entering={enteringKeyframe.duration(400)}\n      exiting={exitingKeyframe.duration(400).withCallback(finished => {\n        'worklet';\n\n        if (finished) {\n          runOnJS(onUnmount)();\n        }\n      })}\n    >\n      <Text style={styles.title}>\n        {question.title}\n      </Text>\n\n      {\n        question.alternatives.map((alternative, index) => (\n          <Option\n            key={index}\n            title={alternative}\n            checked={alternativeSelected === index}\n            onPress={() => setAlternativeSelected && setAlternativeSelected(index)}\n          />\n        ))\n      }\n    </Animated.View>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}