{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { SvgXml } from 'react-native-svg';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar customSVG = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"63\" height=\"75\" viewBox=\"0 0 63 75\" fill=\"none\">\n    <rect width=\"63\" height=\"8\" rx=\"4\" fill=\"white\"/>\n    <path d=\"M5.69423 8H57.4269L63 75H0L5.69423 8Z\" fill=\"url(#paint0_linear_140_852)\"/>\n    <defs>\n      <linearGradient id=\"paint0_linear_140_852\" x1=\"31.5\" y1=\"-40.4021\" x2=\"31.5\" y2=\"75\" gradientUnits=\"userSpaceOnUse\">\n        <stop stop-color=\"white\"/>\n        <stop offset=\"1\" stop-color=\"white\" stop-opacity=\"0\"/>\n      </linearGradient>\n    </defs>\n  </svg>\n`;\nvar CustomTabBar = function CustomTabBar(_ref) {\n  var state = _ref.state,\n    descriptors = _ref.descriptors,\n    navigation = _ref.navigation;\n  return _jsx(View, {\n    style: styles.tabContainer,\n    children: state.routes.map(function (route, index) {\n      var options = descriptors[route.key].options;\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : route.name;\n      var isFocused = state.index === index;\n      var onPress = function onPress() {\n        var event = navigation.emit({\n          type: 'tabPress',\n          target: route.key\n        });\n        if (!isFocused && !event.defaultPrevented) {\n          navigation.navigate(route.name);\n        }\n      };\n      return _jsxs(TouchableOpacity, {\n        onPress: onPress,\n        style: [styles.tabButton, isFocused && styles.activeTabButton],\n        children: [isFocused && _jsx(View, {\n          style: styles.svgBackgroundContainer,\n          children: _jsx(SvgXml, {\n            xml: customSVG,\n            width: \"63\",\n            height: \"75\",\n            style: styles.svgBackground\n          })\n        }), options.tabBarIcon({\n          focused: isFocused,\n          color: 'white',\n          size: 24\n        }), _jsx(Text, {\n          style: [styles.tabLabel, isFocused && styles.activeTabLabel],\n          children: label\n        })]\n      }, route.key);\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  tabContainer: {\n    flexDirection: 'row',\n    backgroundColor: '#8D8D99'\n  },\n  tabButton: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 10,\n    position: 'relative'\n  },\n  activeTabButton: {\n    backgroundColor: 'transparent'\n  },\n  svgBackgroundContainer: {\n    position: 'absolute',\n    top: 0,\n    left: '50%',\n    transform: [{\n      translateX: -31.5\n    }]\n  },\n  svgBackground: {},\n  tabLabel: {\n    color: '#ffffff',\n    marginTop: 4,\n    fontSize: 12\n  },\n  activeTabLabel: {\n    color: '#ffffff',\n    fontWeight: 'bold'\n  }\n});\nexport default CustomTabBar;","map":{"version":3,"names":["React","View","StyleSheet","TouchableOpacity","Text","SvgXml","jsx","_jsx","jsxs","_jsxs","customSVG","CustomTabBar","_ref","state","descriptors","navigation","style","styles","tabContainer","children","routes","map","route","index","options","key","label","tabBarLabel","undefined","name","isFocused","onPress","event","emit","type","target","defaultPrevented","navigate","tabButton","activeTabButton","svgBackgroundContainer","xml","width","height","svgBackground","tabBarIcon","focused","color","size","tabLabel","activeTabLabel","create","flexDirection","backgroundColor","flex","alignItems","justifyContent","paddingVertical","position","top","left","transform","translateX","marginTop","fontSize","fontWeight"],"sources":["C:/quizApp-ReactNative/src/navigation/customTabBar.tsx"],"sourcesContent":["import React from 'react';\r\nimport { View, StyleSheet, TouchableOpacity, Text } from 'react-native';\r\nimport { SvgXml } from 'react-native-svg';\r\n\r\n// Define your SVG code as a string\r\nconst customSVG = `\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"63\" height=\"75\" viewBox=\"0 0 63 75\" fill=\"none\">\r\n    <rect width=\"63\" height=\"8\" rx=\"4\" fill=\"white\"/>\r\n    <path d=\"M5.69423 8H57.4269L63 75H0L5.69423 8Z\" fill=\"url(#paint0_linear_140_852)\"/>\r\n    <defs>\r\n      <linearGradient id=\"paint0_linear_140_852\" x1=\"31.5\" y1=\"-40.4021\" x2=\"31.5\" y2=\"75\" gradientUnits=\"userSpaceOnUse\">\r\n        <stop stop-color=\"white\"/>\r\n        <stop offset=\"1\" stop-color=\"white\" stop-opacity=\"0\"/>\r\n      </linearGradient>\r\n    </defs>\r\n  </svg>\r\n`;\r\n\r\nconst CustomTabBar = ({ state, descriptors, navigation }) => {\r\n  return (\r\n    <View style={styles.tabContainer}>\r\n      {state.routes.map((route, index) => {\r\n        const { options } = descriptors[route.key];\r\n        const label = options.tabBarLabel !== undefined ? options.tabBarLabel : route.name;\r\n\r\n        const isFocused = state.index === index;\r\n\r\n        const onPress = () => {\r\n          const event = navigation.emit({\r\n            type: 'tabPress',\r\n            target: route.key,\r\n          });\r\n\r\n          if (!isFocused && !event.defaultPrevented) {\r\n            navigation.navigate(route.name);\r\n          }\r\n        };\r\n\r\n        return (\r\n          <TouchableOpacity\r\n            key={route.key}\r\n            onPress={onPress}\r\n            style={[styles.tabButton, isFocused && styles.activeTabButton]}\r\n          >\r\n            {/* Custom SVG Background */}\r\n            {isFocused && (\r\n              <View style={styles.svgBackgroundContainer}>\r\n                <SvgXml xml={customSVG} width=\"63\" height=\"75\" style={styles.svgBackground} />\r\n              </View>\r\n            )}\r\n            {/* Your Icon Component */}\r\n            {options.tabBarIcon({ focused: isFocused, color: 'white', size: 24 })}\r\n            {/* Tab Label */}\r\n            <Text style={[styles.tabLabel, isFocused && styles.activeTabLabel]}>{label}</Text>\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  tabContainer: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#8D8D99', // Background color of the tab bar\r\n  },\r\n  tabButton: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    paddingVertical: 10,\r\n    position: 'relative', // Required for positioning SVG behind the icon\r\n  },\r\n  activeTabButton: {\r\n    backgroundColor: 'transparent', // Make sure active tab button background is transparent\r\n  },\r\n  svgBackgroundContainer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: '50%',\r\n    transform: [{ translateX: -31.5 }], // Adjust translation based on SVG width\r\n  },\r\n  svgBackground: {\r\n    // No need to set position, top, and left here\r\n  },\r\n  tabLabel: {\r\n    color: '#ffffff',\r\n    marginTop: 4,\r\n    fontSize: 12,\r\n  },\r\n  activeTabLabel: {\r\n    color: '#ffffff', // Adjust active tab label color if needed\r\n    fontWeight: 'bold', // Adjust active tab label style if needed\r\n  },\r\n});\r\n\r\nexport default CustomTabBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}